import allure
import pytest
from typing import Optional

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
TIMEOUT = 10

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
def check_status_code(response, expected_code: int):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞"""
    assert response.status_code == expected_code, \
        f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å {expected_code}, –Ω–æ –ø–æ–ª—É—á–µ–Ω {response.status_code}"

def check_content_type_json(response):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Content-Type –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è JSON"""
    content_type = response.headers.get("Content-Type", "").lower()
    # –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å text/html –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    if response.status_code >= 400:
        # –î–ª—è –æ—à–∏–±–æ–∫ –¥–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–Ω—ã–µ content-type
        return
    assert "application/json" in content_type, \
        f"–û–∂–∏–¥–∞–ª—Å—è JSON, –Ω–æ –ø–æ–ª—É—á–µ–Ω {content_type}"

def safe_get_json(response):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –µ—Å–ª–∏ –Ω–µ JSON"""
    try:
        return response.json()
    except (ValueError, TypeError):
        return None

def check_note_structure(note_data):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–º–µ—Ç–∫–∏"""
    if note_data is None:
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    assert isinstance(note_data, dict), "–î–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
    assert "id" in note_data, "–ó–∞–º–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'id'"


@allure.feature("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏")
@allure.story("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏")
class TestNoteCreation:
    """–¢–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏–µ–π"""
    
    @pytest.fixture
    def note_payload(self):
        """–ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏"""
        return {
            "title": "–ú–æ—è –ø–µ—Ä–≤–∞—è –∑–∞–º–µ—Ç–∫–∞",
            "content": "–≠—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–µ–π –∑–∞–º–µ—Ç–∫–∏"
        }

    @allure.title("–£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏")
    def test_create_note_success(self, http, base_url, note_payload):
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±—Ä–∞–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ç–µ—Å—Ç–∞
        with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"):
            response = http.post(
                f"{base_url}/note", 
                json=note_payload, 
                timeout=TIMEOUT
            )
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞"):
            check_status_code(response, 201)
            check_content_type_json(response)
            
            response_data = safe_get_json(response)
            
            # –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            assert response_data is not None, "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"
            assert "id" in response_data, "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏"
            assert response_data["title"] == note_payload["title"]
            assert response_data["content"] == note_payload["content"]
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±—Ä–∞–Ω–æ return response_data["id"] - —Ç–µ—Å—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏—è –≤–º–µ—Å—Ç–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
    @pytest.mark.parametrize("payload,expected_status,test_name", [
        ({"content": "–¢–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"}, 409, "–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"),
        ({"title": "–¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫"}, 409, "–±–µ–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"),
        ({}, 409, "–±–µ–∑ –¥–∞–Ω–Ω—ã—Ö"),
        ({"title": "", "content": "–ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"}, 409, "—Å –ø—É—Å—Ç—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"),
    ], ids=[
        "missing_title", "missing_content", "empty_data", "empty_title"
    ])
    @allure.title("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ - {test_name}")
    def test_create_note_various_cases(self, http, base_url, payload, expected_status, test_name):
        with allure.step(f"–û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ {test_name}"):
            response = http.post(
                f"{base_url}/note", 
                json=payload, 
                timeout=TIMEOUT
            )
        
        check_status_code(response, expected_status)

    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ - —É–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏—è —Å –¥–ª–∏–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
    @allure.title("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Å –¥–ª–∏–Ω–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º")
    def test_create_note_long_title(self, http, base_url):
        """–¢–µ—Å—Ç —Å –¥–ª–∏–Ω–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º - —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤–Ω—É—Ç—Ä–∏ —Ç–µ—Å—Ç–∞"""
        payload = {
            "title": "X" * 500,  # –£–∫–æ—Ä–æ—á–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            "content": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ"
        }
        
        response = http.post(f"{base_url}/note", json=payload, timeout=TIMEOUT)
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        assert response.status_code in [201, 400, 409, 413]

    @allure.title("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Å –¥–ª–∏–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º")
    def test_create_note_long_content(self, http, base_url):
        """–¢–µ—Å—Ç —Å –¥–ª–∏–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º"""
        payload = {
            "title": "–¢–µ—Å—Ç",
            "content": "Y" * 2000  # –£–∫–æ—Ä–æ—á–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        }
        
        response = http.post(f"{base_url}/note", json=payload, timeout=TIMEOUT)
        assert response.status_code in [201, 400, 409, 413]

    @allure.title("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Å–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏")
    def test_create_note_special_chars(self, http, base_url):
        """–¢–µ—Å—Ç —Å–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏"""
        payload = {
            "title": "–¢–µ—Å—Ç —Å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏ !@#$%",
            "content": "–û–±—ã—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"
        }
        
        response = http.post(f"{base_url}/note", json=payload, timeout=TIMEOUT)
        assert response.status_code in [201, 400]

    @allure.title("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Å —ç–º–æ–¥–∑–∏")
    def test_create_note_emoji(self, http, base_url):
        """–¢–µ—Å—Ç —Å —ç–º–æ–¥–∑–∏"""
        payload = {
            "title": "–¢–µ—Å—Ç —Å —ç–º–æ–¥–∑–∏ üòÄ",
            "content": "–° —ç–º–æ–¥–∑–∏ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º üéâ"
        }
        
        response = http.post(f"{base_url}/note", json=payload, timeout=TIMEOUT)
        assert response.status_code in [201, 400]


@allure.feature("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏")
@allure.story("–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫")
class TestNoteRetrieval:
    """–¢–µ—Å—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫"""
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ ID —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
    @pytest.fixture
    def existing_note_id(self, http, base_url):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë ID –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö"""
        payload = {
            "title": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è",
            "content": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏"
        }
        response = http.post(f"{base_url}/note", json=payload, timeout=TIMEOUT)
        if response.status_code == 201:
            return safe_get_json(response)["id"]
        else:
            pytest.skip("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞")

    @allure.title("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫")
    def test_get_all_notes(self, http, base_url):
        with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫"):
            response = http.get(f"{base_url}/notes", timeout=TIMEOUT)
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞"):
            check_status_code(response, 200)
            check_content_type_json(response)
            
            notes_data = safe_get_json(response)
            assert notes_data is not None, "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"
            assert isinstance(notes_data, list), "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"
            for note in notes_data:
                check_note_structure(note)

    @allure.title("–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É ID")
    def test_get_note_by_existing_id(self, http, base_url, existing_note_id):
        note_id = existing_note_id
        
        with allure.step(f"–û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ —Å ID={note_id}"):
            response = http.get(f"{base_url}/note/{note_id}", timeout=TIMEOUT)
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞"):
            check_status_code(response, 200)
            check_content_type_json(response)
            
            note_data = safe_get_json(response)
            check_note_structure(note_data)
            if note_data:
                assert note_data["id"] == note_id

    @allure.title("–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É ID")
    @pytest.mark.parametrize("invalid_id", [-1, 999999, 0])
    def test_get_note_by_nonexistent_id(self, http, base_url, invalid_id):
        with allure.step(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID={invalid_id}"):
            response = http.get(f"{base_url}/note/{invalid_id}", timeout=TIMEOUT)
        
        # –ú–æ–∂–µ—Ç –±—ã—Ç—å 404 –∏–ª–∏ 409 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç API
        assert response.status_code in [404, 409]

    @allure.title("–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É ID")
    @pytest.mark.parametrize("invalid_id", ["invalid_string", "123abc", "!@#$"])
    def test_get_note_by_invalid_id(self, http, base_url, invalid_id):
        with allure.step(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID={invalid_id}"):
            response = http.get(f"{base_url}/note/{invalid_id}", timeout=TIMEOUT)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–∂–∏–¥–∞–µ–º 404 –≤–º–µ—Å—Ç–æ 409, —Ç.–∫. —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404
        check_status_code(response, 404)


@allure.feature("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏")
@allure.story("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫")
class TestNoteUpdate:
    """–¢–µ—Å—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫"""
    
    @pytest.fixture
    def existing_note_id(self, http, base_url):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë ID –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        payload = {
            "title": "–ò—Å—Ö–æ–¥–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            "content": "–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"
        }
        response = http.post(f"{base_url}/note", json=payload, timeout=TIMEOUT)
        if response.status_code == 201:
            return safe_get_json(response)["id"]
        else:
            pytest.skip("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞")

    @allure.title("–£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID")
    def test_update_note_success(self, http, base_url, existing_note_id):
        note_id = existing_note_id
        update_payload = {
            "title": "–û–ë–ù–û–í–õ–ï–ù–ù–´–ô –∑–∞–≥–æ–ª–æ–≤–æ–∫",
            "content": "–û–ë–ù–û–í–õ–ï–ù–ù–û–ï —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"
        }
        
        with allure.step(f"–û—Ç–ø—Ä–∞–≤–∫–∞ PUT –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ —Å ID={note_id}"):
            response = http.put(
                f"{base_url}/note/{note_id}", 
                json=update_payload, 
                timeout=TIMEOUT
            )
        
        # –£—Ç–æ—á–Ω–µ–Ω –æ–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å (–º–æ–∂–µ—Ç –±—ã—Ç—å 200 –∏–ª–∏ 204)
        assert response.status_code in [200, 204], \
            f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200 –∏–ª–∏ 204, –Ω–æ –ø–æ–ª—É—á–µ–Ω {response.status_code}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å"):
            get_response = http.get(f"{base_url}/note/{note_id}", timeout=TIMEOUT)
            check_status_code(get_response, 200)
            
            updated_note = safe_get_json(get_response)
            if updated_note:
                assert updated_note["title"] == update_payload["title"]
                assert updated_note["content"] == update_payload["content"]

    @allure.title("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö")
    def test_update_note_empty_data(self, http, base_url, existing_note_id):
        note_id = existing_note_id
        empty_payload = {}
        
        with allure.step(f"–û—Ç–ø—Ä–∞–≤–∫–∞ PUT –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ID={note_id}"):
            response = http.put(
                f"{base_url}/note/{note_id}", 
                json=empty_payload, 
                timeout=TIMEOUT
            )
        
        # –£—Ç–æ—á–Ω–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ - –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –º–æ–∂–µ—Ç –≤–µ—Å—Ç–∏ —Å–µ–±—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É
        # –ú–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å 204, 400 –∏–ª–∏ 409 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ API
        assert response.status_code in [204, 400, 409], \
            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}"


@allure.feature("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏")
@allure.story("–ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫")
class TestNoteSearch:
    """–¢–µ—Å—Ç—ã –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫"""
    
    @pytest.fixture
    def create_note_with_title(self, http, base_url):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
        def _create_note(title):
            payload = {
                "title": title,
                "content": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø–æ–∏—Å–∫–∞"
            }
            response = http.post(f"{base_url}/note", json=payload, timeout=TIMEOUT)
            if response.status_code == 201:
                return safe_get_json(response)["id"]
            else:
                pytest.skip(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º: {title}")
        return _create_note

    @allure.title("–ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–≥–æ–ª–æ–≤–∫—É")
    def test_search_note_by_existing_title(self, http, base_url, create_note_with_title):
        search_title = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞"
        create_note_with_title(search_title)
        
        with allure.step(f"–ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É: {search_title}"):
            response = http.get(
                f"{base_url}/note/read/{search_title}", 
                timeout=TIMEOUT
            )
        
        check_status_code(response, 200)
        check_content_type_json(response)
        
        note_data = safe_get_json(response)
        check_note_structure(note_data)
        if note_data:
            assert note_data["title"] == search_title

    @allure.title("–ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–∫–∏ –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–≥–æ–ª–æ–≤–∫—É")
    def test_search_note_by_nonexistent_title(self, http, base_url):
        nonexistent_title = "–¢–ê–ö–û–ì–û –¢–ê–ô–¢–õ–ê –¢–û–ß–ù–û –ù–ï–¢ 12345"
        
        with allure.step(f"–ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–∫–∏ –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–≥–æ–ª–æ–≤–∫—É: {nonexistent_title}"):
            response = http.get(
                f"{base_url}/note/read/{nonexistent_title}", 
                timeout=TIMEOUT
            )
        
        check_status_code(response, 404)


@allure.feature("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏")
@allure.story("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫")
class TestNoteDeletion:
    """–¢–µ—Å—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫"""
    
    @pytest.fixture
    def create_note_for_deletion(self, http, base_url):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è"""
        payload = {
            "title": "–ó–∞–º–µ—Ç–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            "content": "–≠—Ç–∞ –∑–∞–º–µ—Ç–∫–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞"
        }
        response = http.post(f"{base_url}/note", json=payload, timeout=TIMEOUT)
        if response.status_code == 201:
            note_data = safe_get_json(response)
            return note_data["id"]
        else:
            pytest.skip("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    @allure.title("–£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID")
    def test_delete_note_success(self, http, base_url, create_note_for_deletion):
        note_id = create_note_for_deletion
        
        with allure.step(f"–û—Ç–ø—Ä–∞–≤–∫–∞ DELETE –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è ID={note_id}"):
            response = http.delete(f"{base_url}/note/{note_id}", timeout=TIMEOUT)
        
        check_status_code(response, 204)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–º–µ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–∞
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞"):
            get_response = http.get(f"{base_url}/note/{note_id}", timeout=TIMEOUT)
            check_status_code(get_response, 404)

    @allure.title("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É ID")
    @pytest.mark.parametrize("invalid_id", [-1, 999999])
    def test_delete_nonexistent_note(self, http, base_url, invalid_id):
        with allure.step(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID={invalid_id}"):
            response = http.delete(f"{base_url}/note/{invalid_id}", timeout=TIMEOUT)
        
        check_status_code(response, 409)

    @allure.title("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É ID")
    @pytest.mark.parametrize("invalid_id", ["invalid_string", "123abc", "!@#$"])
    def test_delete_note_invalid_id(self, http, base_url, invalid_id):
        with allure.step(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID={invalid_id}"):
            response = http.delete(f"{base_url}/note/{invalid_id}", timeout=TIMEOUT)

        check_status_code(response, 409)



#  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã:
# 1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ print() - –ò–°–ü–†–ê–í–õ–ï–ù–û
# 2. –ñ—ë—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–π ID - –ò–°–ü–†–ê–í–õ–ï–ù–û
# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –ø—É—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ - –ò–°–ü–†–ê–í–õ–ï–ù–û
# 4. –ù–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–û
# 6. –ö–æ—Ä–æ—Ç–∫–∏–µ –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö - –ò–°–ü–†–ê–í–õ–ï–ù–û
# 7. –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –∫—Ä–∞–π–Ω–∏–µ —Å–ª—É—á–∞–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–û
# 9. –ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–û
# 10. –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –∫–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–û
# 11. –¢–∞–π–º–∞—É—Ç—ã –∏ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å - –ò–°–ü–†–ê–í–õ–ï–ù–û

# ‚ùå –ù–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –∏ –ø—Ä–∏—á–∏–Ω—ã:
# 5. –°–º–µ—à–∞–Ω–Ω—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã - –ù–ï –ò–°–ü–†–ê–í–õ–Ø–õ–û–°–¨
# conftest.py —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã
# 8. –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç allure - –ù–ï –ò–°–ü–†–ê–í–õ–Ø–õ–û–°–¨
# Allure –±–∞–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞. –û–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –≤ –º–æ—ë–º —Å–ª—É—á–∞–µ
# 12. –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –∫–æ–¥ —Ñ–∏–∫—Å—Ç—É—Ä - –ù–ï –ò–°–ü–†–ê–í–õ–Ø–õ–û–°–¨
# –§–∏–∫—Å—Ç—É—Ä—ã –≤ conftest.py —É–∂–µ —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—è–º –∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è

# üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
# –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º
# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON
# –ì–∏–±–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
# –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
# –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è pytest.skip()