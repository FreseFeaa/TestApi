{"name": "test_create_note_edge_casesu041e\\u0447\\u0435\\u043d\\u044c \\u0434\\u043b\\u0438\\u043d\\u043d\\u044b\\u0439 \\u0437\\u0430\\u0433\\u043e\\u043b\\u043e\\u0432\\u043e\\u043a]", "status": "broken", "statusDetails": {"message": "TypeError: string indices must be integers, not 'str'", "trace": "self = <allure_pytest.listener.AllureListener object at 0x000002628C4223C0>\nitem = <Function test_create_note_edge_cases[XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...7\\u0435\\u043d\\u044c \\u0434\\u043b\\u0438\\u043d\\u043d\\u044b\\u0439 \\u0437\\u0430\\u0433\\u043e\\u043b\\u043e\\u0432\\u043e\\u043a]>\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_setup(self, item):\n        if not self._cache.get(item.nodeid):\n            uuid = self._cache.push(item.nodeid)\n            test_result = TestResult(name=item.name, uuid=uuid, start=now(), stop=now())\n            self.allure_logger.schedule_test(uuid, test_result)\n        yield\n        self._update_fixtures_children(item)\n        uuid = self._cache.get(item.nodeid)\n        test_result = self.allure_logger.get_test(uuid)\n        params = self.__get_pytest_params(item)\n        param_id = self.__get_pytest_param_id(item)\n>       test_result.name = allure_name(item, params, param_id)\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\allure_pytest\\listener.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\allure_pytest\\utils.py:134: in allure_name\n    return SafeFormatter().format(\nC:\\Python313\\Lib\\string.py:190: in format\n    return self.vformat(format_string, args, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python313\\Lib\\string.py:194: in vformat\n    result, _ = self._vformat(format_string, args, kwargs, used_args, 2)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Python313\\Lib\\string.py:234: in _vformat\n    obj, arg_used = self.get_field(field_name, args, kwargs)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\AppData\\Roaming\\Python\\Python313\\site-packages\\allure_commons\\utils.py:377: in get_field\n    return super().get_field(field_name, args, kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <allure_commons.utils.SafeFormatter object at 0x000002628C4A3DF0>, field_name = 'title[:20]', args = ()\nkwargs = {'_attach_last_response': None, 'allure_env': None, 'base_url': 'http://localhost:3000', 'content': 'Очень длинный заголовок', ...}\n\n    def get_field(self, field_name, args, kwargs):\n        first, rest = _string.formatter_field_name_split(field_name)\n    \n        obj = self.get_value(first, args, kwargs)\n    \n        # loop through the rest of the field_name, doing\n        #  getattr or getitem as needed\n        for is_attr, i in rest:\n            if is_attr:\n                obj = getattr(obj, i)\n            else:\n>               obj = obj[i]\n                      ^^^^^^\nE               TypeError: string indices must be integers, not 'str'\n\nC:\\Python313\\Lib\\string.py:307: TypeError"}, "start": 1759765318488, "stop": 1759765318488, "uuid": "ace1832f-b82e-44ae-8e1a-db2ef389ad44", "historyId": "6adf97f83acf6453d4a6a4b1070f3754", "labels": [{"name": "story", "value": "Создание заметки"}, {"name": "feature", "value": "Управление заметками"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestNoteCreation"}, {"name": "host", "value": "E4435"}, {"name": "thread", "value": "10656-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api"}]}